}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 3.labels输出 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
if (is_write){
label_names <- read.csv(label_names_path,header = F,dec = " ")
for (i in 1:length(data_name_)){
#1.保存原始数据
if (is.null(chos_col)){
index <- col_y[i]
y <- labels[,index]
out <- match_labels(label_names,y)
}
#获取模型拟合残差(即校正后数据)
else{
m <- model_name[i]
res <- get(m)$residuals
out <- match_labels(label_names,res)
}
#out目录与out文件名称指定
phen_name <- data_name_[i]
out_file <- paste0('label_',phen_name,'_',out_suffix)
out_file <- paste0(out_dir,out_file)
write.table(out,file = out_file,quote = F,row.names = F,col.names = F)
print(out_file)
}
}
class(data_100age$x1)
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 0.function @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
################################## 0.function ##################################
#1.获取数据
data_maker <- function(df,coloum_,var_names){
#
len <- nrow(df)
#init data
df_return <- data.frame(setNames(list(df[[coloum_[1]]]),var_names[1]))
for (i in 2:length(coloum_)){
df_return[[var_names[i]]] <- df[[coloum_[i]]]
}
return (df_return)
}
#2.判断是否为因子数据
judge_factor <- function(col_data,judge_factor_num = 10){
judge <- FALSE
factors <- names(table(col_data))
len <- length(factors)
if (len < judge_factor_num){judge <- TRUE}
return (judge)
}
#3.线性拟合模型获取
get_lm <- function(df,y_name){
varables <- as.vector(names(df))
var_self <- varables[varables != y_name]
formula_lm <- as.formula(paste(y_name,'~',paste(var_self,collapse = '+')))
model <- lm(formula_lm,data = df)
return (model)
}
#4.标签匹配
match_labels <- function(labels_name,y){
for (i in labels_name){
}
}
#5.将标签匹配至表型数据
match_labels <- function(labels_name,y){
out <- data.frame()
for (i in 1:length(labels_name[,1])){
#labels_name :dataframe  labels            index
#                       YYJYZC120010104     10
index <- labels_name[i,2] + 1 #矫正索引 +1
tmp <- c(labels_name[i,1],y[index])
out <- rbind(out,tmp)
}
colnames(out) <- c("label",'phen')
return(out)
}
################################################################################
# 读取csv文件
#补充data --- 'E:/a_science/deppGBLUP/data_jyzxProcess/data_process/fresh_add_1696.csv'
#3765data --- 'E:/a_science/deppGBLUP/data_jyzxProcess/data_process/fresh_unNone.csv'
#5460data --- 'E:/a_science/deppGBLUP/data_jyzxProcess/data_process/fresh_5460.csv'
label_path <- 'E:/a_science/deppGBLUP/data_jyzxProcess/data_process/fresh_5460.csv'
labels <- read.csv(label_path,header = FALSE)
#捕获labels所有列，并将分布情况<10的指标转换为factor型数据
for (i in names(labels)){
judge <- judge_factor(labels[[i]])
if(judge){
labels[[i]] <- as.factor(labels[[i]])
print(judge)}
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ super parameters @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
################ python输出文件格式不变则下面不变 #######################
#标签名称
data_name_ <- c('100age','100backfat','115age','115backfat')
#所有指标名称
var_names <- c('x1','x2','x3','x4','x5','x6','x7','x8','y')
#矫正指标所在列
col_x <- c(1:8)
#标签指标所在列
col_y <- c(9:12)
#标签名文件路径
label_names_path <- paste0(label_path,'head')
#输出目录dir
out_dir <- 'E:/a_science/deppGBLUP/data_jyzxProcess/out/labels/'
################# 根据指标选择改变 ##################
#是否保存拟合数据
is_write <- F
#矫正指标选择
#10110011 --- c(1,3,4,7,8)
#10100011 --- c(1,3,7,8)
chos_col <- c(1,3,7,8)
#指定文件后缀名称
out_suffix <- "5460_10100011.phen"
#选择的所有自变/因变指标名称
chos_var_names <- c(var_names[chos_col],var_names[length(var_names)])
#++++ inpend-var ++++
#1:sex           1
#2:在场           0
#3:品种          1
#4:品系          0
#5:胎次          0
#6:初生重        0
#7:结测体重       1
#8:结测日龄       1
#
#++++ depend-var ++++
#9:100age
#10:100backfat
#11:115age
#12:115backfat
if (is.null(chos_col)==F){
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 1.数据获取 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
##init data_name
data_name <- c()
#循环获取数据表
#name = "data_100age"...
len <- length(col_y)
for (i in 1:len){
df_name <- paste0('data_',data_name_[i])
data_name <- c(data_name,c(df_name))
col_choose <- c(chos_col,col_y[i])
df <- data_maker(labels,coloum_ = col_choose,var_names = chos_var_names)
assign(df_name,df)
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 2.模型拟合 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#获取模型变量名称model_100age...
#init 模型变量
model_name <- c()
for (i in 1:length(data_name)){model_name <- c(model_name,paste0('model_',data_name_[i]))}
#模型获取
for (i in 1:length(model_name)){
model_ <- get_lm(get(data_name[i]),y_name = var_names[length(var_names)])
assign(model_name[i],model_)
}
#展示model
for (i in 1:length(model_name)){
placehodler <- '********************************************'
print(paste0(placehodler,'modelName:',model_name[i],placehodler))
print(get(model_name[i])$coefficients)
print(summary(get(model_name[i])))
}
}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 3.labels输出 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
if (is_write){
label_names <- read.csv(label_names_path,header = F,dec = " ")
for (i in 1:length(data_name_)){
#1.保存原始数据
if (is.null(chos_col)){
index <- col_y[i]
y <- labels[,index]
out <- match_labels(label_names,y)
}
#获取模型拟合残差(即校正后数据)
else{
m <- model_name[i]
res <- get(m)$residuals
out <- match_labels(label_names,res)
}
#out目录与out文件名称指定
phen_name <- data_name_[i]
out_file <- paste0('label_',phen_name,'_',out_suffix)
out_file <- paste0(out_dir,out_file)
write.table(out,file = out_file,quote = F,row.names = F,col.names = F)
print(out_file)
}
}
class(data_100age$x1)
version
library(ggplot2)
library(ggpubr)
library(dplyr)
# 创建数据框
data <- data.frame(
tissue = c(rep("Ileum", 18), rep("Cecum", 17)),
KEGG_Pathway = c(
"D-glutamine and D-glutamate metabolism", "Biosynthesis of vancomycin antibiotics",
"Lysine biosynthesis", "Seleno compound metabolism", "Biotin metabolism",
"Lipopolysaccharide biosynthesis", "Aminoacyl-tRNA biosynthesis",
"Carbon fixation pathways in prokaryotes", "Peptidoglycan biosynthesis",
"Thiamine metabolism", "Fatty acid biosynthesis", "Ribosomes",
"Homologous recombination", "Folic acid-mediated one-carbon metabolism",
"DNA replication", "Streptomycin biosynthesis", "Carbon fixation in photosynthetic organisms",
"Pyrimidine metabolism", "Nicotinic acid and nicotinamide metabolism",
"Ansamycin biosynthesis", "D-glutamine and D-glutamate metabolism",
"Fatty acid biosynthesis", "Phenylalanine, tyrosine, and tryptophan biosynthesis",
"Tryptophan metabolism", "Histidine metabolism", "Seleno compound metabolism",
"Peptidoglycan biosynthesis", "Pantothenic acid and coenzyme A biosynthesis",
"Cysteine and methionine metabolism", "Folic acid biosynthesis",
"Streptomycin biosynthesis", "Protein export", "Lysine biosynthesis",
"Vancomycin antibiotic biosynthesis", "Valine, leucine, and isoleucine biosynthesis",
"Biotin metabolism", "Pentose phosphate pathway"
),
log2FC = c(
0.23, 0.75, 0.22, 0.17, 0.32, 0.69, 0.25, 0.1, 0.08, 0.1, 0.07, 0.1,
0.11, 0.06, 0.12, 0.41, 0.12, 0.07, -0.22, 0.42, 0.2, 0.17, 0.17,
0.16, 0.16, 0.08, 0.08, 0.08, 0.08, -0.09, -0.16, -0.18, -0.22,
-0.4, -0.41, -0.53
),
p = c(
0, 0.01, 0.03, 0.02, 0.01, 0.04, 0, 0, 0.01, 0, 0, 0, 0.03, 0.02,
0.01, 0, 0, 0.01, 0.05, 0.02, 0, 0.05, 0, 0, 0.01, 0, 0, 0, 0,
0.03, 0.02, 0, 0.01, 0, 0
)
)
# 计算Rich Factor
data$RichFactor <- abs(data$log2FC)
# 绘制回肠图示
p_ileum <- ggplot(data %>% filter(tissue == "Ileum"), aes(x = RichFactor, y = KEGG_Pathway, size = -log10(p), color = p)) +
geom_point() +
scale_color_gradient(low = "green", high = "red") +
scale_size(range = c(1, 10)) +
theme_minimal() +
labs(title = "KEGG Pathway Enrichment in Ileum", x = "Rich Factor", y = "Pathways", color = "P-value", size = "Count") +
theme(legend.position = "right")
# 绘制盲肠图示
p_cecum <- ggplot(data %>% filter(tissue == "Cecum"), aes(x = RichFactor, y = KEGG_Pathway, size = -log10(p), color = p)) +
geom_point() +
scale_color_gradient(low = "green", high = "red") +
scale_size(range = c(1, 10)) +
theme_minimal() +
labs(title = "KEGG Pathway Enrichment in Cecum", x = "Rich Factor", y = "Pathways", color = "P-value", size = "Count") +
theme(legend.position = "right")
# 显示图形
print(p_ileum)
print(p_cecum)
# 绘制盲肠图示
p_cecum <- ggplot(data %>% filter(tissue == "Cecum"), aes(x = RichFactor, y = KEGG_Pathway, size = -log10(p), color = p)) +
geom_point() +
scale_color_gradient(low = "green", high = "red") +
scale_size(range = c(1, 10)) +
theme_minimal() +
labs(title = "KEGG Pathway Enrichment in Cecum", x = "Rich Factor", y = "Pathways", color = "P-value", size = "Count") +
theme(legend.position = "right")
library(ggplot2)
library(ggpubr)
library(dplyr)
# 创建数据框
data <- data.frame(
tissue = c(rep("Ileum", 18), rep("Cecum", 17)),
KEGG_Pathway = c(
"D-glutamine and D-glutamate metabolism", "Biosynthesis of vancomycin antibiotics",
"Lysine biosynthesis", "Seleno compound metabolism", "Biotin metabolism",
"Lipopolysaccharide biosynthesis", "Aminoacyl-tRNA biosynthesis",
"Carbon fixation pathways in prokaryotes", "Peptidoglycan biosynthesis",
"Thiamine metabolism", "Fatty acid biosynthesis", "Ribosomes",
"Homologous recombination", "Folic acid-mediated one-carbon metabolism",
"DNA replication", "Streptomycin biosynthesis", "Carbon fixation in photosynthetic organisms",
"Pyrimidine metabolism", "Nicotinic acid and nicotinamide metabolism",
"Ansamycin biosynthesis", "D-glutamine and D-glutamate metabolism",
"Fatty acid biosynthesis", "Phenylalanine, tyrosine, and tryptophan biosynthesis",
"Tryptophan metabolism", "Histidine metabolism", "Seleno compound metabolism",
"Peptidoglycan biosynthesis", "Pantothenic acid and coenzyme A biosynthesis",
"Cysteine and methionine metabolism", "Folic acid biosynthesis",
"Streptomycin biosynthesis", "Protein export", "Lysine biosynthesis",
"Vancomycin antibiotic biosynthesis", "Valine, leucine, and isoleucine biosynthesis",
"Biotin metabolism", "Pentose phosphate pathway"
),
log2FC = c(
0.23, 0.75, 0.22, 0.17, 0.32, 0.69, 0.25, 0.1, 0.08, 0.1, 0.07, 0.1,
0.11, 0.06, 0.12, 0.41, 0.12, 0.07, -0.22, 0.42, 0.2, 0.17, 0.17,
0.16, 0.16, 0.08, 0.08, 0.08, 0.08, -0.09, -0.16, -0.18, -0.22,
-0.4, -0.41, -0.53
),
p = c(
0, 0.01, 0.03, 0.02, 0.01, 0.04, 0, 0, 0.01, 0, 0, 0, 0.03, 0.02,
0.01, 0, 0, 0.01, 0.05, 0.02, 0, 0.05, 0, 0, 0.01, 0, 0, 0, 0,
0.03, 0.02, 0, 0.01, 0, 0
)
)
library(ggplot2)
library(ggpubr)
library(dplyr)
# 创建数据框
data <- data.frame(
tissue = c(rep("Ileum", 18), rep("Cecum", 17)),
KEGG_Pathway = c(
"D-glutamine and D-glutamate metabolism", "Biosynthesis of vancomycin antibiotics",
"Lysine biosynthesis", "Seleno compound metabolism", "Biotin metabolism",
"Lipopolysaccharide biosynthesis", "Aminoacyl-tRNA biosynthesis",
"Carbon fixation pathways in prokaryotes", "Peptidoglycan biosynthesis",
"Thiamine metabolism", "Fatty acid biosynthesis", "Ribosomes",
"Homologous recombination", "Folic acid-mediated one-carbon metabolism",
"DNA replication", "Streptomycin biosynthesis", "Carbon fixation in photosynthetic organisms",
"Pyrimidine metabolism", "Nicotinic acid and nicotinamide metabolism",
"Ansamycin biosynthesis", "D-glutamine and D-glutamate metabolism",
"Fatty acid biosynthesis", "Phenylalanine, tyrosine, and tryptophan biosynthesis",
"Tryptophan metabolism", "Histidine metabolism", "Seleno compound metabolism",
"Peptidoglycan biosynthesis", "Pantothenic acid and coenzyme A biosynthesis",
"Cysteine and methionine metabolism", "Folic acid biosynthesis",
"Streptomycin biosynthesis", "Protein export", "Lysine biosynthesis",
"Vancomycin antibiotic biosynthesis", "Valine, leucine, and isoleucine biosynthesis",
"Biotin metabolism", "Pentose phosphate pathway"
),
log2FC = c(
0.23, 0.75, 0.22, 0.17, 0.32, 0.69, 0.25, 0.1, 0.08, 0.1, 0.07, 0.1,
0.11, 0.06, 0.12, 0.41, 0.12, 0.07, -0.22, 0.42, 0.2, 0.17, 0.17,
0.16, 0.16, 0.08, 0.08, 0.08, 0.08, -0.09, -0.16, -0.18, -0.22,
-0.4, -0.41, -0.53
),
p = c(
1e-10, 0.01, 0.03, 0.02, 0.01, 0.04, 1e-10, 1e-10, 0.01, 1e-10, 1e-10, 1e-10,
0.03, 0.02, 0.01, 1e-10, 1e-10, 0.01, 0.05, 0.02, 1e-10, 0.05, 1e-10,
1e-10, 0.01, 1e-10, 1e-10, 1e-10, 1e-10, 0.03, 0.02, 1e-10, 0.01, 1e-10, 1e-10
)
)
# 计算Rich Factor
data$RichFactor <- abs(data$log2FC)
# 绘制回肠图示
p_ileum <- ggplot(data %>% filter(tissue == "Ileum"),
aes(x = RichFactor, y = reorder(KEGG_Pathway, RichFactor),
size = -log10(p), color = p)) +
geom_point(alpha = 0.8) +
scale_color_gradient(low = "blue", high = "red", name = "P-value") +
scale_size(range = c(3, 10), name = "-log10(p)") +
theme_minimal(base_size = 12) +
labs(title = "KEGG Pathway Enrichment in Ileum",
x = "Rich Factor (|log2FC|)",
y = "Pathways") +
theme(legend.position = "right",
axis.text.y = element_text(size = 10, face = "bold"),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# 绘制盲肠图示
p_cecum <- ggplot(data %>% filter(tissue == "Cecum"),
aes(x = RichFactor, y = reorder(KEGG_Pathway, RichFactor),
size = -log10(p), color = p)) +
geom_point(alpha = 0.8) +
scale_color_gradient(low = "blue", high = "red", name = "P-value") +
scale_size(range = c(3, 10), name = "-log10(p)") +
theme_minimal(base_size = 12) +
labs(title = "KEGG Pathway Enrichment in Cecum",
x = "Rich Factor (|log2FC|)",
y = "Pathways") +
theme(legend.position = "right",
axis.text.y = element_text(size = 10, face = "bold"),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# 显示图形
print(p_ileum)
print(p_cecum)
library(ggplot2)
library(ggpubr)
library(dplyr)
# 创建数据框
data <- data.frame(
tissue = c(rep("Ileum", 18), rep("Cecum", 17)),
KEGG_Pathway = c(
"D-glutamine and D-glutamate metabolism", "Biosynthesis of vancomycin antibiotics",
"Lysine biosynthesis", "Seleno compound metabolism", "Biotin metabolism",
"Lipopolysaccharide biosynthesis", "Aminoacyl-tRNA biosynthesis",
"Carbon fixation pathways in prokaryotes", "Peptidoglycan biosynthesis",
"Thiamine metabolism", "Fatty acid biosynthesis", "Ribosomes",
"Homologous recombination", "Folic acid-mediated one-carbon metabolism",
"DNA replication", "Streptomycin biosynthesis", "Carbon fixation in photosynthetic organisms",
"Pyrimidine metabolism", "Nicotinic acid and nicotinamide metabolism",
"Ansamycin biosynthesis", "D-glutamine and D-glutamate metabolism",
"Fatty acid biosynthesis", "Phenylalanine, tyrosine, and tryptophan biosynthesis",
"Tryptophan metabolism", "Histidine metabolism", "Seleno compound metabolism",
"Peptidoglycan biosynthesis", "Pantothenic acid and coenzyme A biosynthesis",
"Cysteine and methionine metabolism", "Folic acid biosynthesis",
"Streptomycin biosynthesis", "Protein export", "Lysine biosynthesis",
"Vancomycin antibiotic biosynthesis", "Valine, leucine, and isoleucine biosynthesis",
"Biotin metabolism", "Pentose phosphate pathway"
),
log2FC = c(
0.23, 0.75, 0.22, 0.17, 0.32, 0.69, 0.25, 0.1, 0.08, 0.1, 0.07, 0.1,
0.11, 0.06, 0.12, 0.41, 0.12, 0.07, -0.22, 0.42, 0.2, 0.17, 0.17,
0.16, 0.16, 0.08, 0.08, 0.08, 0.08, -0.09, -0.16, -0.18, -0.22,
-0.4, -0.41, -0.53
),
p = c(
1e-10, 0.01, 0.03, 0.02, 0.01, 0.04, 1e-10, 1e-10, 0.01, 1e-10, 1e-10, 1e-10,
0.03, 0.02, 0.01, 1e-10, 1e-10, 0.01, 0.05, 0.02, 1e-10, 0.05, 1e-10,
1e-10, 0.01, 1e-10, 1e-10, 1e-10, 1e-10, 0.03, 0.02, 1e-10, 0.01, 1e-10, 1e-10
)
)
# 计算Rich Factor
data$RichFactor <- abs(data$log2FC)
# 绘制回肠图示
p_ileum <- ggplot(data %>% filter(tissue == "Ileum"),
aes(x = RichFactor, y = reorder(KEGG_Pathway, RichFactor),
size = -log10(p), color = p)) +
geom_point(alpha = 0.8) +
scale_color_gradient(low = "blue", high = "red", name = "P-value") +
scale_size(range = c(3, 10), name = "-log10(p)") +
theme_minimal(base_size = 12) +
labs(title = "KEGG Pathway Enrichment in Ileum",
x = "Rich Factor (|log2FC|)",
y = "Pathways") +
theme(legend.position = "right",
axis.text.y = element_text(size = 10, face = "bold"),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# 绘制盲肠图示
p_cecum <- ggplot(data %>% filter(tissue == "Cecum"),
aes(x = RichFactor, y = reorder(KEGG_Pathway, RichFactor),
size = -log10(p), color = p)) +
geom_point(alpha = 0.8) +
scale_color_gradient(low = "blue", high = "red", name = "P-value") +
scale_size(range = c(3, 10), name = "-log10(p)") +
theme_minimal(base_size = 12) +
labs(title = "KEGG Pathway Enrichment in Cecum",
x = "Rich Factor (|log2FC|)",
y = "Pathways") +
theme(legend.position = "right",
axis.text.y = element_text(size = 10, face = "bold"),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# 显示图形
print(p_ileum)
print(p_cecum)
library(ggplot2)
library(ggpubr)
library(dplyr)
# 创建数据框
data <- data.frame(
tissue = c(rep("Ileum", 18), rep("Cecum", 17)),
KEGG_Pathway = c(
"D-glutamine and D-glutamate metabolism", "Biosynthesis of vancomycin antibiotics",
"Lysine biosynthesis", "Seleno compound metabolism", "Biotin metabolism",
"Lipopolysaccharide biosynthesis", "Aminoacyl-tRNA biosynthesis",
"Carbon fixation pathways in prokaryotes", "Peptidoglycan biosynthesis",
"Thiamine metabolism", "Fatty acid biosynthesis", "Ribosomes",
"Homologous recombination", "Folic acid-mediated one-carbon metabolism",
"DNA replication", "Streptomycin biosynthesis", "Carbon fixation in photosynthetic organisms",
"Pyrimidine metabolism", "Nicotinic acid and nicotinamide metabolism",
"Ansamycin biosynthesis", "D-glutamine and D-glutamate metabolism",
"Fatty acid biosynthesis", "Phenylalanine, tyrosine, and tryptophan biosynthesis",
"Tryptophan metabolism", "Histidine metabolism", "Seleno compound metabolism",
"Peptidoglycan biosynthesis", "Pantothenic acid and coenzyme A biosynthesis",
"Cysteine and methionine metabolism", "Folic acid biosynthesis",
"Streptomycin biosynthesis", "Protein export", "Lysine biosynthesis",
"Vancomycin antibiotic biosynthesis", "Valine, leucine, and isoleucine biosynthesis",
"Biotin metabolism", "Pentose phosphate pathway"
),
log2FC = c(
0.23, 0.75, 0.22, 0.17, 0.32, 0.69, 0.25, 0.1, 0.08, 0.1, 0.07, 0.1,
0.11, 0.06, 0.12, 0.41, 0.12, 0.07, -0.22, 0.42, 0.2, 0.17, 0.17,
0.16, 0.16, 0.08, 0.08, 0.08, 0.08, -0.09, -0.16, -0.18, -0.22,
-0.4, -0.41, -0.53
),
p = c(
1e-10, 0.01, 0.03, 0.02, 0.01, 0.04, 1e-10, 1e-10, 0.01, 1e-10, 1e-10, 1e-10,
0.03, 0.02, 0.01, 1e-10, 1e-10, 0.01, 0.05, 0.02, 1e-10, 0.05, 1e-10,
1e-10, 0.01, 1e-10, 1e-10, 1e-10, 1e-10, 0.03, 0.02, 1e-10, 0.01, 1e-10, 1e-10
)
)
# -------------------------------GBLUP_cross------------------------------------
# 用于检验参考群体估计准确性，参考群内所有个体的基因型和表型都是已知的
library(BGLR)
library(plyr)
library(data.table)
install.packages("BGLR")
# 计算程序的运行时间
t1<-proc.time()
# 加载数据集查看数据维度
geno <- fread("./430geno_10w_GBLUP_BBH.csv")
ind_ID <- geno[,1]
geno <- as.matrix(geno[,-1])
phen <- fread("./430pheno_GBLUP.csv")
fix <- fread("./430fix_GBLUP.csv")
true_ebv <- fread("./430ebv_GBLUP.csv")
seed <- sample(1:10000, 1)  # 从1到10000中随机选择种子
install.packages("BGLR")
# -------------------------------GBLUP_cross------------------------------------
# 用于检验参考群体估计准确性，参考群内所有个体的基因型和表型都是已知的
library(BGLR)
library(plyr)
library(data.table)
install.packages("BGLR")
# 计算程序的运行时间
t1<-proc.time()
install.packages("BGLR")
geno <- fread("./430geno_10w_GBLUP_BBH.csv")
ind_ID <- geno[,1]
geno <- as.matrix(geno[,-1])
phen <- fread("./430pheno_GBLUP.csv")
fix <- fread("./430fix_GBLUP.csv")
true_ebv <- fread("./430ebv_GBLUP.csv")
seed <- sample(1:10000, 1)  # 从1到10000中随机选择种子
getwd
getwd()
setwd('E:/a_science/deppGBLUP/gblup_bayes')
# -------------------------------BayesA_cross-----------------------------------
# 用于检验参考群体估计准确性，参考群内所有个体的基因型和表型都是已知的
library(BGLR)
library(plyr)
library(data.table)
# 计算程序的运行时间
t1<-proc.time()
# 加载数据集查看数据维度
geno <- fread("./430geno_10w_GBLUP_BBH.csv")
sample_IDs <- geno[,1]
geno <- as.matrix(geno[,-1])
phen <- fread("./430pheno_GBLUP.csv")
fix <- fread("./430fix_GBLUP.csv")
true_gebv <- fread("./430ebv_GBLUP.csv")
seed <- sample(1:10000, 1)  # 从1到10000中随机选择种子
geno
